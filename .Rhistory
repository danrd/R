}
indices<-sapply(res, 1, sum)
indices<-sapply(indices, function(x) x>=3)
iris$important_cases<-factor(ind, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
}
important_cases()
important_cases<-function(){
data("iris")
test<-iris[1:4]
m<-apply(test, 2, mean)
res<-test
for (i in 1:4){
res[i]<-test[i]>m[i]
}
indices<-apply(res, 1, sum)
indices<-sapply(indices, function(x) x>=3)
iris$important_cases<-factor(ind, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
}
important_cases()
most_significant <-  function(df){
p_vals <- sapply(df, function(x) chisq.test(table(x))$p.value)#по каждой переменной составляем таблицу сопряженности и вычисляем p-значчение теста Хи-квадрат
mins<-min(p_vals)
return(colnames(df)[which(p_vals==mins)])
}
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
most_significant(test_data)
data<-iris[1:4]
data
#В противном случае переменная important_cases  будет принимать значение No.
important_cases<-function(){
data("iris")
data<-iris[1:4]
means<-apply(data, 2, mean)
res<-apply(data, 1, function(x) x>means)
indices<-apply(res, 1, sum)
indices<-sapply(indices, function(x) x>=3)
iris$important_cases<-factor(ind, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
}
important_cases()
means<-apply(iris[1:4], 1, function(x) x>means)
means<-apply(iris[1:4], 2, mean)
means
data<-iris[1:4]
res<-apply(data, 1, function(x) x>means)
res
indices<-apply(res, 2, sum)
indices
indices<-apply(res, 2, function(x) sum(x)>=3)
indices
important_cases<-function(){
data("iris")
data<-iris[1:4]
means<-apply(data, 2, mean)
res<-apply(data, 1, function(x) x>means)
indices<-apply(res, 2, function(x) sum(x)>=3)
iris$important_cases<-factor(ind, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
}
important_cases()
important_cases<-function(){
data("iris")
data<-iris[1:4]
means<-apply(data, 2, mean)
res<-apply(data, 1, function(x) x>means)
indices<-apply(res, 2, function(x) sum(x)>=3)
iris$important_cases<-factor(indices, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
important_cases()
oijojm
\
important_cases<-function(){
data("iris")
data<-iris[1:4]
means<-apply(data, 2, mean)
res<-apply(data, 1, function(x) x>means)
indices<-apply(res, 2, function(x) sum(x)>=3)
iris$important_cases<-factor(indices, levels=c("FALSE", "TRUE"), labels=c("No", "Yes"))
return(iris)
}
important_cases()
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
get_features(test_data)
get_features <- function(df){
df[, 1] <-  factor(df[, 1], labels = c(1, 0))
df[, "type"] <-  factor(df[, "type"], labels = c(2, 1))
fit <- glm(df$is_prohibited ~ ., data = df, family = "binomial")
pi <- anova(fit, test = "Chisq")$`Pr(>Chi)`
indices <- which(pi<0.05)
if (length(indices)==0){
return("Prediction makes no sense")
}
else {
return(names(df)[ind])
}
}
get_features(test_data)
#Функция в исходный набор данных добавляет новую переменную фактор -
#cluster  -- номер кластера, к которому отнесено каждое из наблюдений.
smart_hclust <- function(df, n){
dist_matrix <- dist(df, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
fit <- hclust(dist_matrix, method = "complete", members = NULL)
cluster <- cutree(fit, n)
df["cluster"] = factor(cluster)
return(df)
}
#Функция возвращает названия переменных, по которым были обнаружены значимые
#различия между выделенными кластерами (p < 0.05).
get_difference <- function(df, n){
dist_matrix <- dist(df, method = "euclidean", diag = FALSE, upper = FALSE, p = 2)
fit <- hclust(dist_matrix, method = "complete", members = NULL)
cluster <- cutree(fit, n)
names <- names(df)
formulas <- sapply(paste(names, "cluster", sep="~"), as.formula)
df["cluster"] = factor(cluster)
custom_fun <- function(x){anova(aov(x, data=df))$P[1]}
res <- sapply(formulas, custom_fun)
return (names[which(res<0.05)])
}
sapply(paste(names(data), "cluster", sep="~"), as.formula)
#Функция рассчитывает, какое минимальное число главных компонент объясняет
#больше 90% изменчивости в исходных данных и добавляет значения этих компонент
#в исходный dataframe в виде новых переменных.
get_pca2 <- function(df){
pc <- prcomp(df)
pca <- prcomp(df)$x
summary <- summary(pc)$importance
indices <- which(summary[3,]>0.9)[1]
add <- pca[, 0:indices]
new <- cbind(x, add)
return (new)
}
get_pca2(swiss)
#Функция рассчитывает, какое минимальное число главных компонент объясняет
#больше 90% изменчивости в исходных данных и добавляет значения этих компонент
#в исходный dataframe в виде новых переменных.
get_pca2 <- function(df){
pc <- prcomp(df)
pca <- prcomp(df)$df
summary <- summary(pc)$importance
indices <- which(summary[3,]>0.9)[1]
add <- pca[, 0:indices]
new <- cbind(x, add)
return (new)
}
get_pca2(swiss)
#Функция рассчитывает, какое минимальное число главных компонент объясняет
#больше 90% изменчивости в исходных данных и добавляет значения этих компонент
#в исходный dataframe в виде новых переменных.
get_pca2 <- function(df){
pc <- prcomp(df)
pca <- prcomp(df)$df
summary <- summary(pc)$importance
indices <- which(summary[3,]>0.9)[1]
add <- pca[, 0:indices]
new <- cbind(df, add)
return (new)
}
get_pca2(swiss)
#Функция рассчитывает, какое минимальное число главных компонент объясняет
#больше 90% изменчивости в исходных данных и добавляет значения этих компонент
#в исходный dataframe в виде новых переменных.
get_pca2 <- function(df){
pc <- prcomp(df)
pca <- prcomp(df)$x
summary <- summary(pc)$importance
indices <- which(summary[3,]>0.9)[1]
add <- pca[, 0:indices]
new <- cbind(df, add)
return (new)
}
get_pca2(swiss)
#Функция проверяет существование строгой мультиколлинеарности,
#а именно наличие линейной комбинации между предикторами и возвращает имена
#переменных, между которыми есть линейная зависимость или
#cобщение "There is no collinearity in the data"
is_multicol <- function(df){
names <- names(df)
c <- cor(df)
d <- diag(x = 1, dim(c)) #единичная матрица для обнуления диагоналей корелляционной
c <- abs(c-d)
indices <- which(c>0.999, arr.ind = T)
if (length(indices)==0){
return ("There is no collinearity in the data")
}
else{
return(row.names(indices))
}
}
#Функция строит регрессионную модель, используя переменные набора данных,
#а затем для каждой  независимой переменной рассчитывает показатель vif
VIF <-  function(data){
vars <- as.matrix(data[-1]) #независимые переменные
custom_fun <- function(x){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(vars, custom_fun)
names(res) <- cols
return(res)
}
swiss
VIF(swiss)
VIF(iris)
VIF <-  function(data){
vars <- as.matrix(data[-1]) #независимые переменные
custom_fun <- function(x){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(cols, custom_fun)
names(res) <- cols
return(res)
}
VIF <-  function(data){
vars <- as.matrix(data[-1]) #независимые переменные
custom_fun <- function(x){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(cols, custom_fun)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- as.matrix(data[-1]) #независимые переменные
custom_fun <- function(x){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(cols, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- as.matrix(data[-1]) #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(cols, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
res <- sapply(cols, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
iris
lm(Sepal.Length~., data=iris)
colnames(iris)
colnames(iris)[1]
lm(colnames(iris)[1]~., data=iris)
as.formula(colnames(iris)[1])
parse(colnames(iris)[1])
parse(text=colnames(iris)[1])
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
y <- sapply(cols, parse, text=x)
res <- sapply(y, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
y <- sapply(cols, function(x) parse(text=x))
res <- sapply(y, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
y <- sapply(cols, function(x) parse(text=x))
res <- sapply(y, custom_fun, data=as.matrix(vars))
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
y <- sapply(cols, function(x) parse(text=x))
res <- sapply(y, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
#а затем для каждой  независимой переменной рассчитывает показатель vif
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
res <- sapply(formulas, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF
VIF(iris)
cols <- colnames(iris)
sapply(paste(cols, ".", sep="~"), as.formula)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
sapply(formulas, custom_fun, data=iris)
sapply(formulas, custom_fun, data=as.matrix(iris))
lm(Sepal.length~., data=iris)
lm(Sepal.Length~., data=iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, df){1/(1-summary(lm(x~., data=df))$r.squared)}
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
res <- sapply(formulas, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, df){1/(1-summary(lm(x~., data=df))$r.squared)}
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
res <- sapply(formulas, custom_fun, df=vars)
names(res) <- cols
return(res)
}
VIF(iris)
#а затем для каждой  независимой переменной рассчитывает показатель vif
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x~., data=data))$r.squared)}
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
res <- sapply(formulas, custom_fun, data=vars)
names(res) <- cols
return(res)
}
#а затем для каждой  независимой переменной рассчитывает показатель vif
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x, data=data))$r.squared)}
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula)
res <- sapply(formulas, custom_fun, data=vars)
names(res) <- cols
return(res)
}
VIF(iris)
> set.seed(42)
> test_data <- data.frame(y = rnorm(30, 5), x1 = rnorm(30, 5))
> test_data$x2 <- test_data$x1^2
> VIF(test_data)
set.seed(42) test_data <- data.frame(y = rnorm(30, 5), x1 = rnorm(30, 5)) test_data$x2 <- test_data$x1^2 VIF(test_data)
set.seed(42)
test_data <- data.frame(y = rnorm(30, 5), x1 = rnorm(30, 5))
test_data$x2 <- test_data$x1^2
VIF(test_data)
#Функция строит регрессионную модель, используя переменные набора данных,
#а затем для каждой  независимой переменной рассчитывает показатель vif
VIF <-  function(data){
vars <- data[-1] #независимые переменные
custom_fun <- function(x, data){1/(1-summary(lm(x, data=data))$r.squared)} #считает VIF для конкретногопризнака
cols <- colnames(vars)
formulas <- sapply(paste(cols, ".", sep="~"), as.formula) #модели для оценки VIF
res <- sapply(formulas, custom_fun, data=vars)
names(res) <- cols
return(res)
}
smart_model <-  function(data){
while(max(VIF(data))>10){
vif<-VIF(data)
m<-which.max(vif)[1]
n<-names(vif)[m]
indices<-which(colnames(data)==n)
data<-data[-indices]
if (dim(data)[2]==2){
break
}
}
model<-lm(data[, 1]~as.matrix(data[, -1]), data=data)
return(model$coef)
}
smart_model(mtcars)
transform_x <-function(x){
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
lambdas <- seq(-2, 2, 0.1)
res <- sapply(lambdas, transform, x=x[, 2])
cors <- sapply(res, cor, y=x[, 1])
fin <- abs(sapply(cors, function (x) max(x[x<1])))
ind <- which(fin==max(fin))
return (res[ind])
}
test_data <- data.frame(y = rnorm(10, 10, 1), x = rnorm(10, 10, 1))
transform_x(test_data)
transform_x <-function(x){
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
lambdas <- seq(-2, 2, 0.1)
res <- sapply(lambdas, transform, x=x[, 2])
cors <- sapply(res, cor, y=x[, 1])
best <- abs(sapply(cors, function (x) max(x[x<1])))
indices <- which(best==max(fin))
return (res[indices])
}
transform_x(test_data)
lambdas <- seq(-2, 2, 0.1)
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
sapply(lambdas, transform, x=test_data[, 2])
lapply(lambdas, transform, x=test_data[, 2])
res<-lapply(lambdas, transform, x=test_data[, 2])
sapply(res, cor, y=test_data[, 1])
res<-sapply(lambdas, transform, x=test_data[, 2])
sapply(res, cor, y=test_data[, 1])
transform_x <-function(x){
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
lambdas <- seq(-2, 2, 0.1)
res <- lapply(lambdas, transform, x=x[, 2])
cors <- sapply(res, cor, y=x[, 1])
best <- abs(sapply(cors, function (x) max(x[x<1])))
indices <- which(best==max(fin))
return (res[indices])
}
transform_x(test_data)
#при котором между x и y будет максимальное абсолютное значение корреляции
transform_x <-function(x){
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
lambdas <- seq(-2, 2, 0.1)
res <- lapply(lambdas, transform, x=x[, 2])
cors <- sapply(res, cor, y=x[, 1])
best <- abs(sapply(cors, function (x) max(x[x<1])))
indices <- which(best==max(best))
return (res[indices])
}
transform_x(test_data)
transform_x <-function(x){
transform <-function(x, lambda){
if (lambda>0){
return (x^(lambda))
}
else if (lambda==0){
return (log(x))
}
else {
return (-(x^(lambda)))
}
}
lambdas <- seq(-2, 2, 0.1)
res <- lapply(lambdas, transform, x=x[, 2])
cors <- sapply(res, cor, y=x[, 1])
best <- abs(sapply(cors, function (x) max(x[x<1])))
indices <- which(best==max(best))
return (unlist(res[indices]))
}
transform_x(test_data)
